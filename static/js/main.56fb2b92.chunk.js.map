{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["GameStage","BoardStatus","LINES","xoSymbols","xo","GameSettingsDialog","props","Modal","show","backdrop","keyboard","centered","Header","className","Title","Body","Button","disabled","variant","Badge","players","ToggleButtonGroup","name","type","defaultValue","ai","onChange","val","e","handleChange","ToggleButton","value","onClick","Footer","stage","First","Square","circle","width","height","viewBox","fill","stroke","cx","cy","r","cross","x1","y1","x2","y2","empty","symbol","Col","style","Board","square","i","idx","squares","renderSquare","Container","Row","borderLeft","borderRight","borderTop","borderBottom","border","INITIALSTATE","history","board","Array","turn","gameState","status","Undetermined","step","Init","Game","aiPlayer","state","AI","bind","this","makeMove","line","Won","winner","every","v","Draw","preventDefault","setState","human","slice","current","getGameState","push","length","Done","Playing","alert","turnMsg","message","Alert","role","Nav","Item","Link","newGame","undo","redo","handleSquareClick","React","Component","self","opponent","atari","found","selfFork","fork","oppFork","corners","entries","corner","opposite","side","kind","kinds","ele","favor","disfavor","oneOfThree","filter","some","a","lineA","b","lineB","sq","includes","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.56fb2b92.chunk.js","sourcesContent":["import React from 'react';\n\nimport Container from \"react-bootstrap/Container\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Badge from \"react-bootstrap/Badge\";\nimport Alert from 'react-bootstrap/Alert'\nimport Modal from 'react-bootstrap/Modal'\nimport Button from 'react-bootstrap/Button'\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup'\nimport ToggleButton from 'react-bootstrap/esm/ToggleButton';\n\nimport './App.css';\n\n\n\nexport const LINES = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n  [0, 4, 8],\n  [2, 4, 6]\n]\n\n\nenum GameStage {\n  Init = 'INIT',\n  First = 'FIRST',\n  Playing = 'PLAYING',\n  Done = 'DONE'\n}\n\nenum BoardStatus {\n  Undetermined = 'UNDETERMINED',\n  Won = 'WON',\n  Draw = 'DRAW'\n}\n\n\ninterface GameState { status: BoardStatus; winner?: string }\ntype Board = string[]\n\ninterface Moment {\n  board: Board;\n  turn: 0 | 1;\n  gameState: GameState;\n}\n\ntype Players = [number, number] // [player 1, player 2 (or AI)]\ninterface State {\n  history: Moment[];\n  step: number;\n  stage: GameStage\n  ai: boolean\n  players: Players\n}\n\n\nconst xoSymbols = ['❌', '⭕']\nconst xo = ['X', 'O']\n\n\nfunction GameSettingsDialog(props: { handleChange: any; players: [number, number]; show: boolean; ai: boolean }) {\n  return (\n    <Modal show={props.show} backdrop='static' keyboard={false} centered>\n      <Modal.Header className=\"justify-content-center\">\n        <Modal.Title><h1 className=\"display-4\">TIC-TAC-TOE</h1></Modal.Title>\n      </Modal.Header>\n      <Modal.Body><h5>Choose game type:</h5>\n        <Button disabled variant=\"primary\">Player 1 <Badge variant=\"light\">{xoSymbols[props.players[0]]}</Badge></Button>\n        <span> vs. </span>\n        <ToggleButtonGroup name=\"ai-toggle\" type=\"radio\" defaultValue={props.ai ? 1 : 0} onChange={(val, e) => props.handleChange({ ai: !!val }, e)}>\n          <ToggleButton value={1}>AI</ToggleButton>\n          <ToggleButton value={0}>Player 2 <Badge variant=\"light\">{xoSymbols[props.players[1]]}</Badge></ToggleButton>\n        </ToggleButtonGroup>\n        <br />\n        <Button className=\"mt-1\" variant=\"primary\" onClick={e => props.handleChange({ players: [props.players[1], props.players[0]] }, e)}><Badge variant=\"light\">{xoSymbols[props.players[0]]}</Badge> ⇌ <Badge variant=\"light\">{xoSymbols[props.players[1]]}</Badge></Button>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"success\" onClick={e => props.handleChange({ stage: GameStage.First }, e)}>Play!</Button>\n      </Modal.Footer>\n    </Modal >\n  )\n}\n\nfunction Square(props: { value: string; onClick: (event: React.MouseEvent<HTMLDivElement>) => void; style?: React.CSSProperties }) {\n  let circle = <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 200 200\" fill=\"none\" stroke=\"black\"><circle cx=\"50%\" cy=\"50%\" r=\"49%\" /></svg>\n  let cross = <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 200 200\" fill=\"none\" stroke=\"black\"><line x1=\"0\" y1=\"0\" x2=\"100%\" y2=\"100%\" /><line x1=\"100%\" y1=\"0\" x2=\"0\" y2=\"100%\" /></svg>\n  let empty = <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 200 200\" fill=\"none\" stroke=\"none\"></svg>\n  let symbol = props.value == null ? empty : props.value === xo[0] ? cross : circle\n  return (\n    <Col className=\"square\" onClick={props.onClick} style={props.style}>{symbol}</Col>\n  )\n}\n\n\nfunction Board(props: { squares: Board; onClick: (n: number) => void; }) {\n  function renderSquare() {\n    let i = 0\n    return function (style?: React.CSSProperties) {\n      let idx = i++\n      return (<Square value={props.squares[idx]} onClick={() => props.onClick(idx)} style={style} />)\n    }\n  }\n  let square = renderSquare()\n  let borderStyle = '1px solid'\n  return (\n    <Container>\n      <Row className=\"board-row justify-content-center\">\n        <Col></Col>\n        {square()}\n        {square({ borderLeft: borderStyle, borderRight: borderStyle })}\n        {square()}\n        <Col></Col>\n      </Row>\n      <Row className=\"board-row justify-content-center\">\n        <Col></Col>\n        {square({ borderTop: borderStyle, borderBottom: borderStyle })}\n        {square({ border: borderStyle })}\n        {square({ borderTop: borderStyle, borderBottom: borderStyle })}\n        <Col></Col>\n      </Row>\n      <Row className=\"board-row justify-content-center\">\n        <Col></Col>\n        {square()}\n        {square({ borderLeft: borderStyle, borderRight: borderStyle })}\n        {square()}\n        <Col></Col>\n      </Row>\n    </Container>\n  )\n}\n\nconst INITIALSTATE: State = {\n  history: [\n    { board: Array(9), turn: 0, gameState: { status: BoardStatus.Undetermined } }\n  ],\n  step: 0,\n  stage: GameStage.Init,\n  ai: true,\n  players: [0, 1]\n}\n\nclass Game extends React.Component<{}, State> {\n  aiPlayer: (squares: Board, players: Players) => number | undefined;\n  constructor(props: any) {\n    super(props)\n    this.state = INITIALSTATE\n    this.aiPlayer = AI\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  componentDidUpdate() {\n    // Get AI to play first move if it has X\n    if (this.state.stage === GameStage.First && this.state.ai && this.state.players[1] === 0) {\n      this.makeMove(this.aiPlayer(this.state.history[0].board, this.state.players), false)\n    }\n  }\n\n  getGameState(board: Board): GameState {\n    // check for 3 in a row\n    for (let line of LINES) {\n      if (board[line[0]] && board[line[0]] === board[line[1]] && board[line[0]] === board[line[2]]) return { status: BoardStatus.Won, winner: board[line[0]] }\n    }\n    // check for draw\n    if (board.every(v => v != null)) return { status: BoardStatus.Draw }\n    return { status: BoardStatus.Undetermined }\n  }\n\n  handleChange(state: State, e: Event): void {\n    e.preventDefault()\n    this.setState(state)\n  }\n\n  handleSquareClick(i: number): void {\n    this.makeMove(i, true)\n  }\n\n  makeMove(i: number | undefined, human: boolean): void {\n    if (i == null) return\n    let history = this.state.history.slice(0, this.state.step + 1)\n    let current = history[this.state.step]\n    let squares = [...current.board]\n    // reject move if the game is finished\n    if (squares[i] || current.gameState.status !== BoardStatus.Undetermined) return\n    // record move\n    if (human) {\n      squares[i] = xo[current.turn]\n    } else {\n      squares[i] = xo[this.state.players[1]]\n    }\n    // update game state and app state\n    let gameState = this.getGameState(squares)\n    history.push({ board: squares, turn: current.turn === 0 ? 1 : 0, gameState: gameState })\n    let step = history.length - 1\n    let stage = gameState.status !== BoardStatus.Undetermined ? GameStage.Done : GameStage.Playing\n    this.setState({\n      history: history,\n      step: step,\n      stage: stage\n    }, () => {\n      // perform AI move, if needed, after the state has been updated\n      if (stage === GameStage.Playing && human && this.state.ai && gameState.status === BoardStatus.Undetermined) {\n        const history = this.state.history.slice(0, this.state.step + 1)\n        const current = history[this.state.step]\n        const squares = [...current.board]\n        this.makeMove(this.aiPlayer(squares, this.state.players), false)\n      }\n    })\n  }\n\n  newGame(): void {\n    this.setState(INITIALSTATE)\n  }\n\n  undo(): void {\n    let step = this.state.step\n    if (this.state.ai) {\n      step -= this.state.history[step - 1].turn === this.state.players[0] ? 1 : 2\n    } else {\n      step--\n    }\n    if (step < 0) step = this.state.players[0]\n    this.setState({\n      step: step,\n      stage: GameStage.Playing\n    })\n  }\n\n  redo(): void {\n    let step = this.state.step + (this.state.ai ? 2 : 1)\n    if (step >= this.state.history.length - 1) step = this.state.history.length - 1\n    this.setState({\n      step: step,\n    })\n  }\n\n\n  render() {\n    const history = this.state.history\n    const current = history[this.state.step]\n    const squares = current.board\n    let alert\n    if (current.gameState.status !== BoardStatus.Undetermined) {\n      let message\n      switch (current.gameState.status) {\n        case BoardStatus.Won:\n          message = current.gameState.winner + \" wins!\"\n          break\n        case BoardStatus.Draw:\n          message = 'Draw!'\n      }\n      alert = <Alert variant='primary'>{message}</Alert>\n    }\n    let turnMsg\n    if (this.state.stage !== GameStage.Done) {\n      turnMsg = 'Player ' + (this.state.players[current.turn] + 1) + ' ' + xoSymbols[current.turn]\n    } else {\n      turnMsg = '-'\n    }\n    return (\n      <Container>\n        <GameSettingsDialog handleChange={this.handleChange} players={this.state.players} show={this.state.stage === GameStage.Init} ai={this.state.ai} />\n        <Container className=\"mb-\" role=\"navigation\">\n          <Nav className=\"justify-content-center mt-1 mb-4\">\n            <Nav.Item>\n              <Nav.Link onClick={() => this.newGame()}>New Game</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link onClick={() => this.undo()} disabled={this.state.step === 0 || (this.state.players[0] === 1 && this.state.step === 1)}>Undo ↶</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link onClick={() => this.redo()} disabled={history.length === 1 || this.state.step === history.length - 1}>Redo ↷</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link disabled><Badge variant='primary'>Turn: {turnMsg}</Badge></Nav.Link>\n            </Nav.Item>\n          </Nav>\n        </Container>\n        <Board squares={squares} onClick={i => this.handleSquareClick(i)} />\n        {alert}\n      </Container>\n    )\n  }\n}\n\n\nfunction App() {\n  return (\n    <Game />\n  );\n}\n\n\nfunction AI(board: Board, players: Players) {\n  const self = xo[players[1]]\n  const opponent = xo[players[0]]\n\n  // Determine move, in order of priority (inspired by https://en.wikipedia.org/wiki/Tic-tac-toe#Strategy)\n\n  // case 1: top priority is winning move\n  for (let line of LINES) {\n    let empty = atari(line, self);\n    if (empty.found)\n      return empty.value;\n  }\n  //case 2: blocking winning move\n  for (let line of LINES) {\n    let empty = atari(line, opponent);\n    if (empty.found)\n      return empty.value;\n  }\n  // case 3: setting up a 'fork'\n  let selfFork = fork(self, opponent)\n  if (selfFork.found)\n    return selfFork.value\n\n  // case 4: preventing a 'fork'\n  let oppFork = fork(opponent, self)\n  if (oppFork.found)\n    return oppFork.value\n\n  // case 5: if available: play center\n  if (board[4] == null)\n    return 4\n\n  const corners = [0, 2, 6, 8]\n  // case 6: if opponent is in a corner, play opposite, if free\n  for (let [idx, corner] of corners.entries()) {\n    if (board[corner] === opponent) {\n      let opposite = corners[(idx + 2) % 4]\n      if (board[opposite] == null) {\n        return opposite\n      }\n    }\n  }\n\n  // case 7: empty corner\n  for (let corner of corners) {\n    if (board[corner] == null)\n      return corner\n  }\n\n  // case 8: empty side\n  for (let side of [1, 3, 5, 7]) {\n    if (board[side] == null)\n      return side\n  }\n\n  // check for two of a kind\n  function atari(line: number[], kind: string): {\n    found: boolean;\n    value?: number;\n  } {\n    let kinds = 0;\n    let empty = null;\n    for (let ele of line) {\n      if (board[ele] === kind)\n        kinds++;\n      if (board[ele] == null)\n        empty = ele;\n    }\n    if (kinds === 2 && empty != null)\n      return { found: true, value: empty };\n    return { found: false };\n  }\n\n  // setting up a 'fork'\n  function fork(favor: string, disfavor: string): { found: boolean, value?: number } {\n    // empty lines with already one friendly move\n    // (checking for some 'self' and no 'opponent' is enough)\n    let oneOfThree = LINES.filter(line => line.some(val => board[val] === favor) && !line.some(val => board[val] === disfavor));\n    // fork not possible if less than two matches are found\n    if (oneOfThree.length < 2) return { found: false }\n    // check for overlaps\n    for (let [a, lineA] of oneOfThree.entries()) {\n      for (let [b, lineB] of oneOfThree.entries()) {\n        // reject same line\n        if (a === b) continue\n        // check for shared empty square\n        for (let sq of lineA) {\n          if (lineB.includes(sq) && board[sq] == null) {\n            return { found: true, value: sq }\n          }\n        }\n      }\n    }\n    return { found: false }\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}